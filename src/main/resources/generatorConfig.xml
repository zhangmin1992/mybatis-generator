<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
	<!-- 执行方式 mybatis-generator:generate -->
	
	<!-- pom文件中有maven引用，这里不写不写不写！！ -->
	<!-- <classPathEntry location="" /> -->
	
	<!-- 数据库配置 实体地址不写死的方式 -->
	<properties resource="mybatisGenerator.properties" />
	
	<!-- targetRuntime:此属性用于指定生成的代码的运行时环境
	defaultModelType参数有：
	flat:该模型为每一张表只生成一个实体类。这个实体类包含表中的所有字段。
	如果表有主键,那么该模型会产生一个单独的主键实体类,
	如果表还有BLOB字段， 则会为表生成一个包含所有BLOB字段的单独的实体类,
	然后为所有其他的字段生成一个单独的实体类，比如AccLegalHolidayshierarchical，AccLegalHolidaysWithBLOBshierarchical，AccLegalHolidaysKeyhierarchical
	conditional 默认值，如果表还有BLOB字段， 则会为表生成一个包含所有BLOB字段的单独的实体类,这个新实体只有一个blob对象除外,，比如AccLegalHolidaysWithBLOBsconditional -->
	<context id="my" targetRuntime="MyBatis3">
	
		<commentGenerator>
			<!-- 是否生成注释代时间戳 -->
			<property name="suppressDate" value="false" />
			<!-- 是否取消注释 -->
			<property name="suppressAllComments" value="true" />
		</commentGenerator>

		<!-- mysql数据库连接 -->
		<jdbcConnection driverClass="com.mysql.jdbc.Driver"
			connectionURL="jdbc:mysql://rm-2ze707l6b0440gg1pxo.mysql.rds.aliyuncs.com:3306/mercury_test_01"
			userId="heimdallr" 
			password="7HGDeJLnH8a3">
		</jdbcConnection>

		<!-- <jdbcConnection driverClass="oracle.jdbc.driver.OracleDriver"
		    connectionURL="jdbc:oracle:thin:@172.20.16.***:1521:CARGO" 
			userId="***" password="***"/> -->

		<!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制 -->
		<javaTypeResolver>
			<!-- forceBigDecimals 默认false，是否强制DECIMAL和NUMERIC类型的字段转换为Java类型的java.math.BigDecimal
			转换规则为：
			如果精度>0或者长度>18，就会使用java.math.BigDecimal
			如果精度=0并且10<=长度<=18，就会使用java.lang.Long
			如果精度=0并且5<=长度<=9，就会使用java.lang.Integer
			如果精度=0并且长度<5，就会使用java.lang.Short
 			-->
			<property name="forceBigDecimals" value="false" />
		</javaTypeResolver>

		<!-- 实体的生成 -->
		<javaModelGenerator targetPackage="${modelPackage}"
			targetProject="src/main/java">
			<!-- 是否允许子包，即targetPackage.schemaName.tableName -->
			<property name="enableSubPackages" value="true" />
			<!-- 是否对类CHAR类型的列的数据进行trim操作 -->
			<property name="trimStrings" value="false" />
			<!-- 是否对model添加 构造函数 -->
			<property name="constructorBased" value="true" />
		</javaModelGenerator>

		<!--mapper xml -->
		<sqlMapGenerator targetPackage="${sqlMapperPackage}" targetProject="src/main/resources">
			<!-- enableSubPackages:是否让schema作为包的后缀 -->
			<property name="enableSubPackages" value="true" />
		</sqlMapGenerator>

		<!-- 根据<context>的targetRuntime分成三类 
		MyBatis3:
		ANNOTATEDMAPPER:基于注解的Mapper接口，不会有对应的XML映射文件，
		    Mapper文件内容是 @Delete({
				        "delete from acc_legal_holidays",
				        "where id = #{id,jdbcType=INTEGER}"
				    })
				    int deleteByPrimaryKey(Integer id);
		MIXEDMAPPER:XML和注解的混合形式，(上面这种情况中的)SqlProvider注解方法会被XML替代。
		XMLMAPPER:所有的方法都在XML中，接口调用依赖XML文件。
		
		MyBatis3Simple:
		ANNOTATEDMAPPER:基于注解的Mapper接口，不会有对应的XML映射文件
		XMLMAPPER:所有的方法都在XML中，接口调用依赖XML文件。
		
		Ibatis2Java2或**Ibatis2Java5**:
		IBATIS:生成的对象符合iBATIS的DAO框架（不建议使用）。
		GENERIC-CI:生成的对象将只依赖于SqlMapClient，通过构造方法注入。
		GENERIC-SI:生成的对象将只依赖于SqlMapClient，通过setter方法注入。
		SPRING:生成的对象符合Spring的DAO接口
		-->
		<javaClientGenerator targetPackage="${daoMapperPackage}" targetProject="src/main/java" type="XMLMAPPER">
			<!-- enableSubPackages:是否让schema作为包的后缀 -->
			<property name="enableSubPackages" value="true" />
		</javaClientGenerator>

		<!-- 数据库文件对应关系 -->
		<table tableName="acc_table2"
			domainObjectName="AccTable2" enableCountByExample="false"
			enableUpdateByExample="false" enableDeleteByExample="false"
			enableSelectByExample="false" selectByExampleQueryId="false">
			<!-- 忽略某一个列，这个列在实体中和xml中都不会有 -->
			<!-- <ignoreColumn column="ccc2"></ignoreColumn> -->
			
			<!-- 给需要获取自增长id的表配置generatedKey,这样的话xml中的insert语句有这句话 
			keyColumn="id" keyProperty="id" useGeneratedKeys="true" -->
			<!-- generatedKey用于生成生成主键的方法，
            如果设置了该元素，MBG会在生成的<insert>元素中生成一条正确的<selectKey>元素，该元素可选
            column:主键的列名；
            sqlStatement：要生成的selectKey语句，有以下可选项：
                Cloudscape:相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
                DB2       :相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
                DB2_MF    :相当于selectKey的SQL为：SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1
                Derby      :相当于selectKey的SQL为：VALUES IDENTITY_VAL_LOCAL()
                HSQLDB      :相当于selectKey的SQL为：CALL IDENTITY()
                Informix  :相当于selectKey的SQL为：select dbinfo('sqlca.sqlerrd1') from systables where tabid=1
                MySql      :相当于selectKey的SQL为：SELECT LAST_INSERT_ID()
                SqlServer :相当于selectKey的SQL为：SELECT SCOPE_IDENTITY()
                SYBASE      :相当于selectKey的SQL为：SELECT @@IDENTITY
                JDBC      :相当于在生成的insert元素上添加useGeneratedKeys="true"和keyProperty属性-->
			<generatedKey column="id" sqlStatement="MySql"/>
		</table>
	</context>
</generatorConfiguration>